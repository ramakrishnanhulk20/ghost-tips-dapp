/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IGatewayContract,
  IGatewayContractInterface,
} from "../../../../../fhevm/gateway/lib/Gateway.sol/IGatewayContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "ctsHandles",
        type: "uint256[]",
      },
      {
        internalType: "bytes4",
        name: "callbackSelector",
        type: "bytes4",
      },
      {
        internalType: "uint256",
        name: "msgValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxTimestamp",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "passSignaturesToCaller",
        type: "bool",
      },
    ],
    name: "requestDecryption",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IGatewayContract__factory {
  static readonly abi = _abi;
  static createInterface(): IGatewayContractInterface {
    return new Interface(_abi) as IGatewayContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IGatewayContract {
    return new Contract(address, _abi, runner) as unknown as IGatewayContract;
  }
}
