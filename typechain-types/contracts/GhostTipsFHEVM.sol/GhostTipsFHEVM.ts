/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface GhostTipsFHEVMInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTipJar"
      | "getLeaderboard"
      | "getMyJars"
      | "getMyTips"
      | "getTipJarInfo"
      | "ghostToken"
      | "jarsByOwner"
      | "nextJarId"
      | "protocolId"
      | "sendTip"
      | "tipJars"
      | "tipsByJar"
      | "totalTipsReceived"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "TipJarCreated" | "TipSent"): EventFragment;

  encodeFunctionData(
    functionFragment: "createTipJar",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getMyJars", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMyTips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTipJarInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ghostToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "jarsByOwner",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextJarId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTip",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tipJars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tipsByJar",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalTipsReceived",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTipJar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyJars", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMyTips", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTipJarInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ghostToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jarsByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextJarId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendTip", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tipJars", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tipsByJar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalTipsReceived",
    data: BytesLike
  ): Result;
}

export namespace TipJarCreatedEvent {
  export type InputTuple = [
    jarId: BigNumberish,
    owner: AddressLike,
    name: string
  ];
  export type OutputTuple = [jarId: bigint, owner: string, name: string];
  export interface OutputObject {
    jarId: bigint;
    owner: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TipSentEvent {
  export type InputTuple = [
    jarId: BigNumberish,
    sender: AddressLike,
    encryptedAmount: BytesLike,
    message: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    jarId: bigint,
    sender: string,
    encryptedAmount: string,
    message: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    jarId: bigint;
    sender: string;
    encryptedAmount: string;
    message: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GhostTipsFHEVM extends BaseContract {
  connect(runner?: ContractRunner | null): GhostTipsFHEVM;
  waitForDeployment(): Promise<this>;

  interface: GhostTipsFHEVMInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTipJar: TypedContractMethod<[name: string], [bigint], "nonpayable">;

  getLeaderboard: TypedContractMethod<
    [limit: BigNumberish],
    [
      [string[], string[], bigint[]] & {
        addresses: string[];
        encryptedTotals: string[];
        tipCounts: bigint[];
      }
    ],
    "view"
  >;

  getMyJars: TypedContractMethod<[], [bigint[]], "view">;

  getMyTips: TypedContractMethod<
    [jarId: BigNumberish],
    [
      [string[], string[], string[], bigint[]] & {
        senders: string[];
        encryptedAmounts: string[];
        messages: string[];
        timestamps: bigint[];
      }
    ],
    "view"
  >;

  getTipJarInfo: TypedContractMethod<
    [jarId: BigNumberish],
    [
      [string, string, string, bigint] & {
        owner: string;
        name: string;
        encryptedTotal: string;
        tipCount: bigint;
      }
    ],
    "view"
  >;

  ghostToken: TypedContractMethod<[], [string], "view">;

  jarsByOwner: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  nextJarId: TypedContractMethod<[], [bigint], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  sendTip: TypedContractMethod<
    [jarId: BigNumberish, amount: BigNumberish, message: string],
    [void],
    "nonpayable"
  >;

  tipJars: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        owner: string;
        name: string;
        encryptedTotalAmount: string;
        totalTipsReceived: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  tipsByJar: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, bigint] & {
        sender: string;
        encryptedAmount: string;
        message: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  totalTipsReceived: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTipJar"
  ): TypedContractMethod<[name: string], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<
    [limit: BigNumberish],
    [
      [string[], string[], bigint[]] & {
        addresses: string[];
        encryptedTotals: string[];
        tipCounts: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMyJars"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getMyTips"
  ): TypedContractMethod<
    [jarId: BigNumberish],
    [
      [string[], string[], string[], bigint[]] & {
        senders: string[];
        encryptedAmounts: string[];
        messages: string[];
        timestamps: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTipJarInfo"
  ): TypedContractMethod<
    [jarId: BigNumberish],
    [
      [string, string, string, bigint] & {
        owner: string;
        name: string;
        encryptedTotal: string;
        tipCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ghostToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "jarsByOwner"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "nextJarId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sendTip"
  ): TypedContractMethod<
    [jarId: BigNumberish, amount: BigNumberish, message: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tipJars"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean] & {
        owner: string;
        name: string;
        encryptedTotalAmount: string;
        totalTipsReceived: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tipsByJar"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, string, bigint] & {
        sender: string;
        encryptedAmount: string;
        message: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalTipsReceived"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "TipJarCreated"
  ): TypedContractEvent<
    TipJarCreatedEvent.InputTuple,
    TipJarCreatedEvent.OutputTuple,
    TipJarCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TipSent"
  ): TypedContractEvent<
    TipSentEvent.InputTuple,
    TipSentEvent.OutputTuple,
    TipSentEvent.OutputObject
  >;

  filters: {
    "TipJarCreated(uint256,address,string)": TypedContractEvent<
      TipJarCreatedEvent.InputTuple,
      TipJarCreatedEvent.OutputTuple,
      TipJarCreatedEvent.OutputObject
    >;
    TipJarCreated: TypedContractEvent<
      TipJarCreatedEvent.InputTuple,
      TipJarCreatedEvent.OutputTuple,
      TipJarCreatedEvent.OutputObject
    >;

    "TipSent(uint256,address,bytes32,string,uint256)": TypedContractEvent<
      TipSentEvent.InputTuple,
      TipSentEvent.OutputTuple,
      TipSentEvent.OutputObject
    >;
    TipSent: TypedContractEvent<
      TipSentEvent.InputTuple,
      TipSentEvent.OutputTuple,
      TipSentEvent.OutputObject
    >;
  };
}
