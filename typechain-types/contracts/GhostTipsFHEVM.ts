/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GhostTipsFHEVMInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTipJar"
      | "getEncryptedBalance"
      | "getLeaderboard"
      | "getTipCount"
      | "getTipJarCount"
      | "getUserTipJars"
      | "ghostToken"
      | "protocolId"
      | "sendTip"
      | "tipJarCount"
      | "tipJars"
      | "userTipJars"
      | "withdrawFromTipJar"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "TipJarCreated" | "TipJarWithdrawal" | "TipSent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createTipJar",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLeaderboard",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTipCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTipJarCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTipJars",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ghostToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTip",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tipJarCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tipJars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userTipJars",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromTipJar",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTipJar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLeaderboard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTipCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTipJarCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTipJars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ghostToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sendTip", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tipJarCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tipJars", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTipJars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromTipJar",
    data: BytesLike
  ): Result;
}

export namespace TipJarCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    title: string
  ];
  export type OutputTuple = [id: bigint, creator: string, title: string];
  export interface OutputObject {
    id: bigint;
    creator: string;
    title: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TipJarWithdrawalEvent {
  export type InputTuple = [
    tipJarId: BigNumberish,
    creator: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [tipJarId: bigint, creator: string, amount: bigint];
  export interface OutputObject {
    tipJarId: bigint;
    creator: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TipSentEvent {
  export type InputTuple = [
    tipJarId: BigNumberish,
    amount: BigNumberish,
    newTipCount: BigNumberish,
    message: string
  ];
  export type OutputTuple = [
    tipJarId: bigint,
    amount: bigint,
    newTipCount: bigint,
    message: string
  ];
  export interface OutputObject {
    tipJarId: bigint;
    amount: bigint;
    newTipCount: bigint;
    message: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GhostTipsFHEVM extends BaseContract {
  connect(runner?: ContractRunner | null): GhostTipsFHEVM;
  waitForDeployment(): Promise<this>;

  interface: GhostTipsFHEVMInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTipJar: TypedContractMethod<
    [_title: string, _description: string, _category: string],
    [bigint],
    "nonpayable"
  >;

  getEncryptedBalance: TypedContractMethod<
    [_tipJarId: BigNumberish],
    [string],
    "view"
  >;

  getLeaderboard: TypedContractMethod<
    [limit: BigNumberish],
    [[bigint[], bigint[]]],
    "view"
  >;

  getTipCount: TypedContractMethod<[_tipJarId: BigNumberish], [bigint], "view">;

  getTipJarCount: TypedContractMethod<[], [bigint], "view">;

  getUserTipJars: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  ghostToken: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  sendTip: TypedContractMethod<
    [_tipJarId: BigNumberish, _amount: BigNumberish, _message: string],
    [void],
    "nonpayable"
  >;

  tipJarCount: TypedContractMethod<[], [bigint], "view">;

  tipJars: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        category: string;
        encryptedBalance: string;
        tipCount: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  userTipJars: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  withdrawFromTipJar: TypedContractMethod<
    [_tipJarId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTipJar"
  ): TypedContractMethod<
    [_title: string, _description: string, _category: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEncryptedBalance"
  ): TypedContractMethod<[_tipJarId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getLeaderboard"
  ): TypedContractMethod<[limit: BigNumberish], [[bigint[], bigint[]]], "view">;
  getFunction(
    nameOrSignature: "getTipCount"
  ): TypedContractMethod<[_tipJarId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTipJarCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTipJars"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "ghostToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "sendTip"
  ): TypedContractMethod<
    [_tipJarId: BigNumberish, _amount: BigNumberish, _message: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tipJarCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tipJars"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        bigint,
        boolean,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        category: string;
        encryptedBalance: string;
        tipCount: bigint;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "userTipJars"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdrawFromTipJar"
  ): TypedContractMethod<
    [_tipJarId: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "TipJarCreated"
  ): TypedContractEvent<
    TipJarCreatedEvent.InputTuple,
    TipJarCreatedEvent.OutputTuple,
    TipJarCreatedEvent.OutputObject
  >;
  getEvent(
    key: "TipJarWithdrawal"
  ): TypedContractEvent<
    TipJarWithdrawalEvent.InputTuple,
    TipJarWithdrawalEvent.OutputTuple,
    TipJarWithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "TipSent"
  ): TypedContractEvent<
    TipSentEvent.InputTuple,
    TipSentEvent.OutputTuple,
    TipSentEvent.OutputObject
  >;

  filters: {
    "TipJarCreated(uint256,address,string)": TypedContractEvent<
      TipJarCreatedEvent.InputTuple,
      TipJarCreatedEvent.OutputTuple,
      TipJarCreatedEvent.OutputObject
    >;
    TipJarCreated: TypedContractEvent<
      TipJarCreatedEvent.InputTuple,
      TipJarCreatedEvent.OutputTuple,
      TipJarCreatedEvent.OutputObject
    >;

    "TipJarWithdrawal(uint256,address,uint256)": TypedContractEvent<
      TipJarWithdrawalEvent.InputTuple,
      TipJarWithdrawalEvent.OutputTuple,
      TipJarWithdrawalEvent.OutputObject
    >;
    TipJarWithdrawal: TypedContractEvent<
      TipJarWithdrawalEvent.InputTuple,
      TipJarWithdrawalEvent.OutputTuple,
      TipJarWithdrawalEvent.OutputObject
    >;

    "TipSent(uint256,uint256,uint256,string)": TypedContractEvent<
      TipSentEvent.InputTuple,
      TipSentEvent.OutputTuple,
      TipSentEvent.OutputObject
    >;
    TipSent: TypedContractEvent<
      TipSentEvent.InputTuple,
      TipSentEvent.OutputTuple,
      TipSentEvent.OutputObject
    >;
  };
}
