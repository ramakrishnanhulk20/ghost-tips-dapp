/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface GhostTipsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTipJar"
      | "getEncryptedBalance"
      | "getTipCount"
      | "getTipJarCount"
      | "getUserTipJars"
      | "owner"
      | "protocolId"
      | "renounceOwnership"
      | "sendGhostTip"
      | "tipJars"
      | "tips"
      | "transferOwnership"
      | "userTipJars"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GhostTipSent"
      | "OwnershipTransferred"
      | "TipJarCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createTipJar",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedBalance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTipCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTipJarCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTipJars",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendGhostTip",
    values: [BigNumberish, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tipJars",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tips", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userTipJars",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createTipJar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTipCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTipJarCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTipJars",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendGhostTip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tipJars", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tips", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTipJars",
    data: BytesLike
  ): Result;
}

export namespace GhostTipSentEvent {
  export type InputTuple = [
    tipJarId: BigNumberish,
    tipId: BigNumberish,
    encryptedSenderHash: BytesLike
  ];
  export type OutputTuple = [
    tipJarId: bigint,
    tipId: bigint,
    encryptedSenderHash: string
  ];
  export interface OutputObject {
    tipJarId: bigint;
    tipId: bigint;
    encryptedSenderHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TipJarCreatedEvent {
  export type InputTuple = [
    id: BigNumberish,
    creator: AddressLike,
    title: string,
    category: string
  ];
  export type OutputTuple = [
    id: bigint,
    creator: string,
    title: string,
    category: string
  ];
  export interface OutputObject {
    id: bigint;
    creator: string;
    title: string;
    category: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GhostTips extends BaseContract {
  connect(runner?: ContractRunner | null): GhostTips;
  waitForDeployment(): Promise<this>;

  interface: GhostTipsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTipJar: TypedContractMethod<
    [_title: string, _description: string, _category: string],
    [bigint],
    "nonpayable"
  >;

  getEncryptedBalance: TypedContractMethod<
    [_tipJarId: BigNumberish],
    [string],
    "view"
  >;

  getTipCount: TypedContractMethod<[], [bigint], "view">;

  getTipJarCount: TypedContractMethod<[], [bigint], "view">;

  getUserTipJars: TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sendGhostTip: TypedContractMethod<
    [
      _tipJarId: BigNumberish,
      _encryptedAmount: BytesLike,
      _encryptedMessage: string,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;

  tipJars: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        boolean,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        category: string;
        encryptedBalance: string;
        encryptedTipCount: string;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  tips: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, boolean, bigint] & {
        tipJarId: bigint;
        encryptedSender: string;
        encryptedAmount: string;
        encryptedMessage: string;
        isClaimed: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  userTipJars: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTipJar"
  ): TypedContractMethod<
    [_title: string, _description: string, _category: string],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getEncryptedBalance"
  ): TypedContractMethod<[_tipJarId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTipCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTipJarCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserTipJars"
  ): TypedContractMethod<[_user: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendGhostTip"
  ): TypedContractMethod<
    [
      _tipJarId: BigNumberish,
      _encryptedAmount: BytesLike,
      _encryptedMessage: string,
      inputProof: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "tipJars"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        string,
        string,
        string,
        string,
        boolean,
        bigint
      ] & {
        id: bigint;
        creator: string;
        title: string;
        description: string;
        category: string;
        encryptedBalance: string;
        encryptedTipCount: string;
        isActive: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tips"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, boolean, bigint] & {
        tipJarId: bigint;
        encryptedSender: string;
        encryptedAmount: string;
        encryptedMessage: string;
        isClaimed: boolean;
        createdAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userTipJars"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "GhostTipSent"
  ): TypedContractEvent<
    GhostTipSentEvent.InputTuple,
    GhostTipSentEvent.OutputTuple,
    GhostTipSentEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TipJarCreated"
  ): TypedContractEvent<
    TipJarCreatedEvent.InputTuple,
    TipJarCreatedEvent.OutputTuple,
    TipJarCreatedEvent.OutputObject
  >;

  filters: {
    "GhostTipSent(uint256,uint256,bytes32)": TypedContractEvent<
      GhostTipSentEvent.InputTuple,
      GhostTipSentEvent.OutputTuple,
      GhostTipSentEvent.OutputObject
    >;
    GhostTipSent: TypedContractEvent<
      GhostTipSentEvent.InputTuple,
      GhostTipSentEvent.OutputTuple,
      GhostTipSentEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TipJarCreated(uint256,address,string,string)": TypedContractEvent<
      TipJarCreatedEvent.InputTuple,
      TipJarCreatedEvent.OutputTuple,
      TipJarCreatedEvent.OutputObject
    >;
    TipJarCreated: TypedContractEvent<
      TipJarCreatedEvent.InputTuple,
      TipJarCreatedEvent.OutputTuple,
      TipJarCreatedEvent.OutputObject
    >;
  };
}
